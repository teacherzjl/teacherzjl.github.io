import{_ as e,o,c as t,U as a}from"./chunks/framework.e3082fbd.js";const g=JSON.parse('{"title":"【译】Fetch Priority 和优化LCP","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"Translate/1.【译】Fetch Priority 和优化LCP.md","filePath":"Translate/1.【译】Fetch Priority 和优化LCP.md"}'),c={name:"Translate/1.【译】Fetch Priority 和优化LCP.md"},p=a(`<h1 id="【译】fetch-priority-和优化lcp" tabindex="-1">【译】Fetch Priority 和优化LCP <a class="header-anchor" href="#【译】fetch-priority-和优化lcp" aria-label="Permalink to &quot;【译】Fetch Priority 和优化LCP&quot;">​</a></h1><blockquote><p>原文 <a href="https://imkev.dev/fetchpriority-opportunity" target="_blank" rel="noreferrer">《Fetch Priority and optimizing LCP》</a><br> 原文发布时间：2023 年 1 月 2 日<br> 原文更新时间：2023 年 5 月 2 日</p></blockquote><p>Fetch Priority API 用于向浏览器指示资源的相对优先级。您可以通过在<code>&lt;img&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>和<code>&lt;iframe&gt;</code>元素上添加<code>fetchpriority</code>属性，或通过 Fetch API 上的<code>priority</code>属性来配置优先级。<br> 浏览器的加载过程是复杂的。浏览器主要通过请求的类型和在文档标记中的位置来确定其优先级。例如，在文档的 <code>&lt;head&gt;</code> 中请求的CSS文件将被分配最高优先级，而带有<code>defer</code>属性的 <code>&lt;script&gt;</code> 元素将被分配低优先级。浏览器按照发现资源的顺序下载具有相同优先级的资源。</p><h2 id="fetchpriority" tabindex="-1">fetchpriority <a class="header-anchor" href="#fetchpriority" aria-label="Permalink to &quot;fetchpriority&quot;">​</a></h2><p><code>fetchpriority</code>属性可用于提示浏览器提高或降低所请求资源的优先级。具有以下三个属性值：<br><code>high</code> - 相对于默认优先级，该资源更重要<br><code>low</code> - 相对于默认优先级，该资源较不重要<br><code>auto</code> - 默认值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/lcp.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">alt</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">A dog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">fetchpriority</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">high</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span></code></pre></div><p>在上面的示例中，我们提示浏览器将<code>&lt;img&gt;</code>的优先级设为比默认优先级更重要。<br> 在 fetch 方法的 priority 属性也支持相同的值。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/api/data.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">priority</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">high</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>在上述的<code>fetch</code>请求中，我们向浏览器表明该<code>fetch</code>请求的优先级比默认优先级要高。</p><h2 id="默认优先级" tabindex="-1">默认优先级 <a class="header-anchor" href="#默认优先级" aria-label="Permalink to &quot;默认优先级&quot;">​</a></h2><p>Fetch Priority API 可以提高或降低资源相对于其默认的优先级。例如，图像在默认情况下始终以<code>low</code>优先级开始，但分配<code>fetchpriority=&quot;high&quot;</code>会将它们的优先级提高到<code>high</code>。另一方面，阻塞渲染的样式表默认分配了<code>Highest</code>优先级。分配它<code>fetchpriority=&quot;low&quot;</code>会将其优先级降低到<code>high</code> - 但不是<code>low</code>。<code>fetchpriority</code>用于调整资源相对于其默认值的优先级，而不是显式设置其值。<br> 在<a href="https://docs.google.com/document/d/1bCDuq9H1ih9iNjgzyAL0gpwNFiEP4TZS-YLRp_RuMlc/edit" target="_blank" rel="noreferrer">influence of Fetch Priority on resource prioritization in Chromium</a>文档中记录了不同的资源类型、它们的默认优先级 (◉) 以及使用<code>fetchpriority=&quot;high&quot;</code>(⬆) 和<code>fetchpriority=&quot;low&quot;</code>(⬇) 时产生的优先级。<br> 请注意，如果发现图像在视口内，则其优先级会提高到<code>High</code>。但是，这可能在加载过程中靠后的阶段发生，如果请求已经发送则可能影响很小或没有影响。使用<code>fetchpriority=&quot;high&quot;</code>允许您告诉浏览器以<code>High</code>优先级启动，而不是等待浏览器确定它是否在视口中。</p><h2 id="紧凑模式-tight-mode" tabindex="-1">“紧凑模式”（Tight mode） <a class="header-anchor" href="#紧凑模式-tight-mode" aria-label="Permalink to &quot;“紧凑模式”（Tight mode）&quot;">​</a></h2><p>大多数浏览器分两个阶段下载资源。在初始阶段（Chromium 也将此称为“Tight mode”），浏览器不会下载<code>Low</code>优先级资源，除非少于两个正在传输的请求。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3df1b4d1e88d446c84f0c4714c53188f~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 在上面的瀑布图中，您可以看到资源 image-1.jpg 即使它立即被发现，也会等到 style-2.css 完成下载后才开始下载。此时，只有script.js一个资源仍在传输中，这时浏览器开始下载<code>Low</code>优先级图像。<br> 一旦<code>&lt;head&gt;</code>中的所有阻塞脚本都已下载并执行（带有<code>async</code>或<code>defer</code>的脚本不呈现阻塞），初始阶段就完成了。即使有两个以上正在传输的请求，浏览器现在也可以根据它们的优先级和它们在标记中出现的顺序继续下载任何剩余的资源。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f7553db29af4e36a95286ae3cf42fb4~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 在上图中，一旦阻塞渲染的JavaScript下载并执行（粉色条），即使这两个 CSS 文件仍在传输中，浏览器也会开始下载图像。黄色垂直线表示 DOM 可交互或者<code>readystatechange</code>事件被触发的时间。</p><h2 id="preconnect" tabindex="-1">preconnect <a class="header-anchor" href="#preconnect" aria-label="Permalink to &quot;preconnect&quot;">​</a></h2><p>如果图像位于不同的域上，则浏览器需要在下载文件之前打开与该域的连接。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d332e5b2c9eb452487eb0c726c96aeb6~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 这显示在 WebPageTest 图表上，下载前有绿色、橙色和洋红色条。我们可以使用<code>preconnect</code>资源提示更早地开始下载图像。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf8f6acbd3674f29ac65118fb2e5e704~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 在上图中，与<code>cdn.glitch.global</code>域的连接在初始阶段打开 - 在浏览器能够开始下载文件之前。一旦浏览器退出初始阶段（黄色垂直线），它就会立即开始下载图像——节省大约 350 毫秒。</p><h2 id="preload" tabindex="-1">preload <a class="header-anchor" href="#preload" aria-label="Permalink to &quot;preload&quot;">​</a></h2><p>如果我们能够使用<code>preconnect</code>资源提示缩短下载时间，我们是否能够使用<code>preload</code>指令进一步缩短下载时间？简洁的回答：不能。 preload 指令允许您通知浏览器有关“晚发现”的关键资源。这对于在样式表或脚本中加载的资源特别有用，例如背景图或字体。在我们的示例中，图像在标记中声明并较早发现，因此预加载几乎没有影响。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/425401348f5943debf43b5a87b396c90~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 在上图中，我们已将<code>preconnect</code>替换为以下内容：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;link</span></span>
<span class="line"><span style="color:#A6ACCD;">      rel=&quot;preload&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">      as=&quot;image&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">      href=&quot;https://cdn.glitch.global/.../image-1.jpg&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    /&gt;</span></span></code></pre></div><p>尽管有预加载，图像仍然不会开始下载，直到少于两个正在运行的请求。</p><h2 id="fetchpriority-1" tabindex="-1">fetchpriority <a class="header-anchor" href="#fetchpriority-1" aria-label="Permalink to &quot;fetchpriority&quot;">​</a></h2><p>我们可以使用 Fetch Priority 向浏览器表明 image-1.jpg 比其默认优先级更重要，使用：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://cdn.glitch.global/.../image-1.jpg</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">fetchpriority</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">high</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">alt</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    /&gt;</span></span></code></pre></div><p>这应该会将图像的初始优先级从<code>Low</code>增加到<code>High</code>，使得图像能在初始阶段被处理。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56346d5fb4664199b424f1f2b9881b82~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 上面的瀑布图显示， image-1.jpg 在初始阶段与其他关键资源同时被处理。这给了我们迄今为止最大的改进。</p><h2 id="firefox" tabindex="-1">Firefox <a class="header-anchor" href="#firefox" aria-label="Permalink to &quot;Firefox&quot;">​</a></h2><p>Firefox 使用类似的启发式方法来确定应在初始阶段加载哪些资源。然而，与基于 Chromium 的浏览器不同，它不会开始下载任何<code>Low</code>优先级资源，直到<code>&lt;head&gt;</code>中的所有 JavaScript 都被下载并执行 - 即使只有一个<code>High</code>优先级请求正在运行。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e557a1d94a2347b9b08d6915e0e9f34b~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 以上截图来自Firefox Web开发者工具，显示在下载和执行脚本（第2行）以及页面变得可交互之后，图片资源（第5至8行）被获取的时间点，用蓝色的垂直线表示。<br> 当 Chrome 等待在<code>&lt;head&gt;</code>中声明的 JavaScript 下载并执行时，Firefox 等待所有在图像元素之前声明的渲染阻塞 JavaScript——即使这些是在<code>&lt;head&gt;</code>之外声明的。<br> Firefox 还不支持 fetchpriority ，但是，我们可以使用 preload 指令提高 image-1.jpg 的优先级。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/31da9b8516a84f3aa48287ef7e22507b~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 在上面的屏幕截图中，文件 image-1.jpg 与其他资源并行获取。这类似于我们在 Google Chrome 上添加<code>fetchpriority=&quot;high&quot;</code>时看到的行为。</p><h2 id="safari" tabindex="-1">Safari <a class="header-anchor" href="#safari" aria-label="Permalink to &quot;Safari&quot;">​</a></h2><p>iOS 和 macOS 上的 Safari 也有一个初始阶段，尽管它的行为不同于 Chrome 和 Firefox。<br> 低优先级资源在正在传输中的请求少于两个时开始获取。这不依赖于<code>readystatechange</code>事件，即使在没有任何阻止渲染的JavaScript的页面上，浏览器也会等待至少有一个正在传输中的请求。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9126c4747b8841d4b639102c40587ee8~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 上图显示了从Safari的Web Inspector中获取的截图，直到style-1.css完成下载并且正在传输中的请求少于两个时，图像才开始下载。 在 Safari 上，初始阶段仅适用于同源资源。如果<code>Low</code>优先资源是从不同的域加载的，它们将在被发现后立即获取。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a43c1d5ff46b49efbec5554abd87215c~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 在上面的截图中，跨域图像被立即获取，而不是等待<code>High</code>优先级资源完成下载。<br><code>proload</code>指令不会影响资源的优先级。然而，将<code>&lt;link rel=&quot;preload&quot;&gt;</code>指令放置在高优先级请求之前会导致它更早地下载；因为在发现时正在传输中的请求少于两个。这与其他浏览器上的行为相同，在大多数情况下，我建议不要将<code>proload</code>指令放置在高优先级资源之上，因为阻塞渲染的CSS应该具有优先权。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a7c43f039724e3db85395a799224807~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 此图中，<code>Low</code>优先级文件 image-1.jpg 在<code>High</code>优先级 style-1.css 文件之前开始下载，因为在文档标记中<code>&lt;link rel=&quot;preload&quot;&gt;</code>位于其上方。</p><h2 id="将-preload-与-fetchpriority-组合" tabindex="-1">将 preload 与 fetchpriority 组合 <a class="header-anchor" href="#将-preload-与-fetchpriority-组合" aria-label="Permalink to &quot;将 preload 与 fetchpriority  组合&quot;">​</a></h2><p>到目前为止，Fetch Priority 仅在基于 Chromium 的浏览器上受支持，但是，它在不识别<code>fetchpriority</code>属性的浏览器上会进行降级处理。这允许我们将<code>preload</code>指令与 Fetch Priority 结合起来。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">preload</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">as</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">image</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">fetchpriority</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">high</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://cdn.glitch.global/.../image-1.jpg</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    /&gt;</span></span></code></pre></div><p>支持 Fetch Priority 的浏览器将使用分配的<code>fetchpriority</code>预加载资源，而不支持的浏览器将使用 preload 指令。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3c4de2ed757408095efc73174c51f9d~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 上图表显示了与之前在<code>&lt;img&gt;</code>元素上包含<code>fetchpriority</code>属性的图表类似的结果。这种方法的优势在于统一处理资源的优先级，无论是在支持Fetch Priority的浏览器上还是在不支持的浏览器上。</p><h2 id="fetchpriority的潜在好处" tabindex="-1">fetchpriority的潜在好处 <a class="header-anchor" href="#fetchpriority的潜在好处" aria-label="Permalink to &quot;fetchpriority的潜在好处&quot;">​</a></h2><p>在本节中，我们将研究使用<code>fetchpriority</code>的潜在好处。所有数据均取自[HTTP Archive]，我们仅考虑使用 HTTP/2 或 HTTP/3 且最大内容绘制 (LCP) 元素为图像的页面。所有查询和结果都是公开的。 注意：HTTP Archive数据是使用Chrome的私有WebPageTest实例收集的。您可以详细了解他们的<a href="https://httparchive.org/faq#how-is-the-data-gathered" target="_blank" rel="noreferrer">方法</a>。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3054ddfefdde4e3e9a8cc90ebfee2eac~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 我假设<code>fetchpriority</code>的好处是发现资源的时间和开始下载的时间之间的时间差。我将此称为“opportunity”。因此，如果一个资源发现得早，但浏览器开始下载的时间晚，那么opportunity就更大。<br> 请注意，如果图像是从不同的域提供的，则会在“opportunity”中包括打开连接的时间。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6efc938aab3d4ad8a468245d8ea6b1f9~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 上图绘制了针对 LCP 的opportunity（以毫秒为单位）。opportunity以 100 毫秒为一组进行存储，而大于 1,000 毫秒的任何时间都被分组到一个存储桶中。该图表显示了“opportunity”与 LCP 之间的强相关性 - opportunity越大，LCP 越差。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54e195b2178746ac88687341adaab1f3~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 上图显示了针对<code>Low</code>和<code>High</code>优先级的移动设备的opportunity分布。在中间值处，<code>High</code>优先级请求的 LCP 图像在被发现后 21 毫秒开始下载，而<code>Low</code>优先级请求的 LCP 图像在 102 毫秒后开始下载。在75%和90%处差异甚至更大。<br> 除了 fetchpriority=&quot;High&quot; 之外，如果图像是较晚发现的，例如在使用 CSS background-image 或使用 JavaScript 添加图像时，图像可能具有初始的<code>High</code>优先级。在这些情况下，<code>fetchpriority</code>将无济于事，因为请求已经具有<code>High</code>优先级。<br> 我们可以得出结论，优先考虑 LCP 图像具有明显的好处。opportunity因页面的组成而异。我们已经介绍过，当至少有一个渲染阻塞脚本和两个或多个正在进行的请求时，不会立即获取<code>Low</code>优先级资源。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ed7b11ec60e4e158e57a51016d3c935~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 上图绘制了渲染阻塞资源的数量与opportunity（以毫秒为单位）。直观地说，您的页面拥有的渲染阻塞资源越多，下载 LCP 图像的延迟就越大。</p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>有很大的机会可以通过资源提示和获取优先级来确定 LCP 图像的优先级。即使LCP元素在主文档中立即可发现，许多页面仍会将其排队等待处理。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44d4b4348bd04731841e123de737e307~tplv-k3u1fbpfcp-zoom-1.image" alt=""> 上图显示，在中等移动网站上，LCP 图像排队等待 98 毫秒，直到浏览器开始下载它。在90% 处LCP 图像排队等待 810 毫秒。使用 Fetch Priority 可以提高 LCP 图像的优先级并减少等待时间。<br> 还有一些案例研究表明，在将<code>fetchpriority=&quot;high&quot;</code>添加到 LCP 图像后，Largest Contentful Paint (LCP) 得到了改进。<a href="https://www.etsy.com/codeascraft/priority-hints-what-your-browser-doesnt-know-yet" target="_blank" rel="noreferrer">Etsy 的改进幅度为 4%</a>，据报道其他一些改进幅度为 20-30%。<br> 提高资源的优先级通常会以另一个资源为代价，因此应该谨慎使用获取优先级（Fetch Priority）。然而，如果浏览器正在将您的LCP图像排队等待处理，我建议您尝试使用Fetch Priority，看看是否能减少等待时间并改善LCP。</p><p>简而言之，</p><ul><li>将 LCP 图像托管在与 HTML 文档相同的域中。如果这不可行，请使用<code>preconnect</code>来建立早期连接。</li><li>LCP 图像应该是文档标记的一部分。如果这不可行，请使用<code>preload</code>告诉浏览器在请求之前下载图像。</li><li>尽可能避免阻塞资源。如果您的 LCP 图像以<code>Low</code>优先级下载，请使用<code>fetchpriority</code>提示浏览器更早下载您的图像。</li><li>在支持<code>fetchpriority</code>之前，您可以使用<code>preload</code>在 Firefox 上设置 LCP 图像的优先级。使用<code>preload</code>指令时，Safari 不会提前下载图像。</li></ul><h2 id="相关链接" tabindex="-1">相关链接 <a class="header-anchor" href="#相关链接" aria-label="Permalink to &quot;相关链接&quot;">​</a></h2><p><a href="https://fetchpriority-opportunity.glitch.me" target="_blank" rel="noreferrer">Demos</a><br><a href="https://github.com/kevinfarrugia/fetchpriority-opportunity" target="_blank" rel="noreferrer">Queries</a> &amp; <a href="https://docs.google.com/spreadsheets/d/11QwVrr1zcFGBhOMNe25uFBD9VUfg4JP3AUkhWjod9RY/edit#gid=0" target="_blank" rel="noreferrer">Results</a><br><a href="https://web.dev/fetch-priority" target="_blank" rel="noreferrer">Optimizing resource loading with Priority Hints</a>(web.dev)<br><a href="https://www.debugbear.com/blog/priority-hints" target="_blank" rel="noreferrer">Prioritizing Important Page Resources With Priority Hints</a>(<a href="https://www.debugbear.com/" target="_blank" rel="noreferrer">debugbear.com</a>)</p><h2 id="备注" tabindex="-1">备注 <a class="header-anchor" href="#备注" aria-label="Permalink to &quot;备注&quot;">​</a></h2><p>此功能最初称为 Priority Hints，但在标准化后更名为 Fetch Priority。</p>`,42),r=[p];function s(i,l,n,d,h,f){return o(),t("div",null,r)}const u=e(c,[["render",s]]);export{g as __pageData,u as default};
