import{_ as s,o as a,c as n,U as l}from"./chunks/framework.e3082fbd.js";const i=JSON.parse('{"title":"🔥Vue暗藏秘招揭示：v-for指令颠覆对象属性渲染顺序的传统观念！","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"Original/2.🔥Vue暗藏秘招揭示： v-for指令颠覆对象属性渲染顺序的传统观念！.md","filePath":"Original/2.🔥Vue暗藏秘招揭示： v-for指令颠覆对象属性渲染顺序的传统观念！.md"}'),o={name:"Original/2.🔥Vue暗藏秘招揭示： v-for指令颠覆对象属性渲染顺序的传统观念！.md"},p=l(`<h1 id="🔥vue暗藏秘招揭示-v-for指令颠覆对象属性渲染顺序的传统观念" tabindex="-1">🔥Vue暗藏秘招揭示：v-for指令颠覆对象属性渲染顺序的传统观念！ <a class="header-anchor" href="#🔥vue暗藏秘招揭示-v-for指令颠覆对象属性渲染顺序的传统观念" aria-label="Permalink to &quot;🔥Vue暗藏秘招揭示：v-for指令颠覆对象属性渲染顺序的传统观念！&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>今日发现在Vue项目中有同学使用<code>v-for</code> 指令来渲染对象属性，并且该产品需求中对属性的顺序有特定要求。我们知道，在 JavaScript 中，对象的属性排序是无序的，不像数组那样按照索引顺序排列。另外，不同的 JavaScript 引擎可能会以不同的方式对对象的属性进行排序。但在这里<code>v-for</code>真的能够保障对象属性的渲染顺序是正确的吗？难不成是一个隐藏的bug？对于我这个强迫症来说实在忍不了，带着问题，我们马不停蹄开始本文的剖析。</p><h2 id="vue中对象属性遍历渲染机制" tabindex="-1">Vue中对象属性遍历渲染机制 <a class="header-anchor" href="#vue中对象属性遍历渲染机制" aria-label="Permalink to &quot;Vue中对象属性遍历渲染机制&quot;">​</a></h2><ul><li><h6 id="vue2中对象属性遍历渲染机制" tabindex="-1">Vue2中对象属性遍历渲染机制 <a class="header-anchor" href="#vue2中对象属性遍历渲染机制" aria-label="Permalink to &quot;Vue2中对象属性遍历渲染机制&quot;">​</a></h6></li></ul><p>当然，vue2和vue3的响应式原理是不同，导致<code>v-for</code>的底层渲染原理也可能不同，那么我们首先我们来翻看Vue2中<code>v-for</code>相关的源码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//vue2中简化后的v-for源码</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">renderList</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">keyOrIndex</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">VNode</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ret</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">VNode</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">l</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">keys</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">key</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">...</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{...}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">isObject</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">hasSymbol</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">iterator</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{...}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">keys</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">ret</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">keys</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">l</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">keys</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">l</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ret</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>透过源码我们发现，当使用 <code>v-for</code> 遍历对象属性时，Vue 使用 <code>Object.keys()</code> 来获取对象的属性。那么<code>object.keys</code>被调用的背后发生了什么？<code>object.keys</code>是如何保障属性顺序的？ 接着我顺手翻开了ECMAScript 规范，在ECMAScript 规范（ES2024）中在对Object.keys的底层原理阐述中我们找到了<code>”按属性创建时间升序“</code>这样的描述，如图： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1fbcd03a86794edfb0d1b4feb9a89126~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"> 综上我们可以确定，在Vue2中通过使用 <code>Object.keys()</code> 来保证了属性的在使用<code>v-for</code>指令是可以按照顺序渲染。</p><ul><li><h6 id="vue3中对象属性遍历渲染机制" tabindex="-1">Vue3中对象属性遍历渲染机制 <a class="header-anchor" href="#vue3中对象属性遍历渲染机制" aria-label="Permalink to &quot;Vue3中对象属性遍历渲染机制&quot;">​</a></h6></li></ul><p>在 Vue 3 中，Vue 引入了响应式系统的重大改进，并通过 <code>Proxy</code> 对象进行对象的响应式追踪。在 Vue 3 中，<code>v-for</code> 遍历对象属性时，Vue 会使用 <code>Reflect.ownKeys()</code> 来获取对象的属性，这个方法会返回对象的所有键，包括字符串键和 Symbol 键，而<code>Reflect.ownKeys()</code> 底层执行原理和Ojbect.keys()相同，都是按照它们在对象中的插入顺序进行渲染。因此 Vue 3 在渲染对象属性时也能够保证它们的顺序。</p><h2 id="在react中如何保障对象属性渲染顺序" tabindex="-1">在React中如何保障对象属性渲染顺序 <a class="header-anchor" href="#在react中如何保障对象属性渲染顺序" aria-label="Permalink to &quot;在React中如何保障对象属性渲染顺序&quot;">​</a></h2><p>在 React 的 JSX 中，使用 <code>for...in</code> 循环遍历对象属性时，并不能保证属性的顺序。 如果你需要确保对象属性的顺序在 JSX 中保持一致，推荐使用数组或 Map 等有序的数据结构来存储对象属性，然后在 JSX 中遍历和渲染它们。</p><p>以下是一个示例，展示如何使用数组来保持对象属性的顺序：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myObject </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">key1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">key2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">key3</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value3</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> objectArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entries</span><span style="color:#A6ACCD;">(myObject)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">objectArray</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">([</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    ))</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在最新的 ECMAScript 规范（ES2024）中，<code>Object.entries()</code> 方法返回的数组按照对象属性的插入顺序进行排序。这意味着，如果你按顺序向对象添加属性，然后使用 <code>Object.entries()</code> 方法，返回的数组元素将按照插入的顺序排列。</p><h2 id="使用map实现" tabindex="-1">使用Map实现 <a class="header-anchor" href="#使用map实现" aria-label="Permalink to &quot;使用Map实现&quot;">​</a></h2><p><code>Map</code> 提供了一种可靠的方法来存储和迭代键值对，并且保持其插入顺序不变。值得注意的是，如果你删除并重新插入某个键值对，它将会移动到最后。但是在不修改键值对的情况下，<code>Map</code> 会保持插入顺序不变。以下是一个示例，展示了 <code>Map</code> 的有序性：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myMap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">myMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">myMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">myMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> myMap) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出结果：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// key1 value1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// key2 value2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// key3 value3</span></span></code></pre></div><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>总结而言，在Vue中使用<code>v-for</code>指令遍历对象属性时，是可以保障对象属性的渲染顺序的。在Vue 2 中根据 <code>Object.keys()</code> 返回的顺序进行渲染；而Vue 3 则是通过本身的响应式机制确保了对象属性的渲染顺序，这是 Vue 3 响应式系统的一个改进点，使得在渲染对象属性时更可靠地保持顺序。在 React中使<code>for...in</code> 循环遍历对象属性并不能保证属性的顺序，可以用数组或 Map 等有序的数据结构来存储对象属性，以保障对象属性在渲染时的顺序。</p><p>需要注意的是，Vue 的渲染行为是由其内部实现决定的，并且未来的 Vue 版本可能会进行更改。因此，依赖于 Vue 对象属性的顺序保持在业务逻辑中可能不是一个可靠的做法。</p><p>最后，本文的最终目的是想通过对v-for指令原理的浅要剖析来抛砖引玉，激发读者对 Vue 数据驱动的无限魅力的探索，以引发更深入的思考和探讨。</p><h2 id="备注" tabindex="-1">备注 <a class="header-anchor" href="#备注" aria-label="Permalink to &quot;备注&quot;">​</a></h2><h6 id="本文基于最新的ecmascript-规范-es2024-进行的调研总结-因时间原因并未调研object-keys等方法在老旧的js-环境-特别是在-ecmascript-2015-之前的版本-中执行逻辑是否与目前一致-既有可能在老旧版本浏览器上vue无法保障对象属性渲染顺序-关于这块的调研后期将补上。另外-对于不同的js方法-在未来的版本可能也会有所更改。因此-在开发中请仔细阅读文档并进行测试-以确保您的代码在不同环境中的表现一致性。" tabindex="-1"><em>本文基于最新的ECMAScript 规范（ES2024）进行的调研总结，因时间原因并未调研Object.keys等方法在老旧的js 环境（特别是在 ECMAScript 2015 之前的版本）中执行逻辑是否与目前一致，<code>既有可能在老旧版本浏览器上Vue无法保障对象属性渲染顺序</code>，关于这块的调研后期将补上。另外，对于不同的js方法，在未来的版本可能也会有所更改。因此，在开发中请仔细阅读文档并进行测试，以确保您的代码在不同环境中的表现一致性。</em> <a class="header-anchor" href="#本文基于最新的ecmascript-规范-es2024-进行的调研总结-因时间原因并未调研object-keys等方法在老旧的js-环境-特别是在-ecmascript-2015-之前的版本-中执行逻辑是否与目前一致-既有可能在老旧版本浏览器上vue无法保障对象属性渲染顺序-关于这块的调研后期将补上。另外-对于不同的js方法-在未来的版本可能也会有所更改。因此-在开发中请仔细阅读文档并进行测试-以确保您的代码在不同环境中的表现一致性。" aria-label="Permalink to &quot;*本文基于最新的ECMAScript 规范（ES2024）进行的调研总结，因时间原因并未调研Object.keys等方法在老旧的js 环境（特别是在 ECMAScript 2015 之前的版本）中执行逻辑是否与目前一致，\`既有可能在老旧版本浏览器上Vue无法保障对象属性渲染顺序\`，关于这块的调研后期将补上。另外，对于不同的js方法，在未来的版本可能也会有所更改。因此，在开发中请仔细阅读文档并进行测试，以确保您的代码在不同环境中的表现一致性。*&quot;">​</a></h6><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in</a></p><p><a href="https://tc39.es/ecma262" target="_blank" rel="noreferrer">https://tc39.es/ecma262</a></p>`,27),e=[p];function t(c,r,y,F,D,A){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{i as __pageData,d as default};
